# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = ["cryptd" "xhci_pci" "nvme" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  boot.initrd.luks.devices = {
    cryptkey = {
      device = "/dev/disk/by-uuid/a1568d7c-dcfc-48f8-bd5c-15fe496e896e";
    };

    cryptroot = {
      allowDiscards = true;
      device = "/dev/disk/by-uuid/0090236f-bc80-444f-8026-b3eea64df092";
      keyFile = "/dev/mapper/cryptkey";
      keyFileSize = 8192;
    };

    cryptswap = {
      allowDiscards = true;
      device = "/dev/disk/by-uuid/0312f2a1-8720-4def-b706-61aa639ec256";
      keyFile = "/dev/mapper/cryptkey";
      keyFileSize = 8192;
    };
  };

  boot.initrd.postDeviceCommands = lib.mkAfter ''
    cryptsetup close cryptkey
  '';

  fileSystems."/" =
    { device = "nvme-pool/system/root";
      fsType = "zfs";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/7A2D-F0E1";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  fileSystems."/nix" =
    { device = "nvme-pool/local/nix";
      fsType = "zfs";
    };

  fileSystems."/var" =
    { device = "nvme-pool/system/var";
      fsType = "zfs";
    };

  fileSystems."/home/morph" =
    { device = "nvme-pool/user/home/morph";
      fsType = "zfs";
    };

  swapDevices = [{
    device = "/dev/mapper/cryptswap";
  }];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s20f0u4u4.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s31f6.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp3s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
